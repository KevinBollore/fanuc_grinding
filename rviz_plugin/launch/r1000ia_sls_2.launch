<?xml version="1.0"?>
<launch>
  <!-- The planning and execution components of MoveIt! configured to run -->
  <!-- using the ROS-Industrial interface. -->

  <!-- Non-standard joint names:
       - Create a file [robot_moveit_config]/config/joint_names.yaml
           controller_joint_names: [joint_1, joint_2, ... joint_N]
       - Update with joint names for your robot (in order expected by rbt controller)
       - and uncomment the following line: -->
  <rosparam command="load" file="$(find fanuc_r1000ia_support)/config/joint_names_r1000ia80f.yaml" />

  <!-- the "sim" argument controls whether we connect to a Simulated or Real robot -->
  <!--  - if sim=false, a robot_ip argument is required -->
  <arg name="sim" default="true" />
  <arg name="robot_ip" unless="$(arg sim)" />
  <arg name="use_bswap" unless="$(arg sim)" default="true" />

  <!-- load PLY file from command line in order to use it in C++ programm  -->
  <!--
  <arg name="meshname" default="" />  
  <param name="meshname_param" value="$(arg meshname)" />
  -->

  <!-- load the robot_description parameter before launching ROS-I nodes -->
  <include file="$(find fanuc_r1000ia_sls_2_grinding_moveit_config)/launch/planning_context.launch" >
    <arg name="load_robot_description" value="true" />
  </include>

  <!-- run the robot simulator and action interface nodes -->
  <group if="$(arg sim)">
    <remap from="joint_states" to="fanuc/joint_states"/>
    <include file="$(find industrial_robot_simulator)/launch/robot_interface_simulator.launch" />
  </group>

  <!-- run the "real robot" interface nodes -->
  <!--   - this typically includes: robot_state, motion_interface, and joint_trajectory_action nodes -->
  <!--   - replace these calls with appropriate robot-specific calls or launch files -->
  <group unless="$(arg sim)">
    <remap from="joint_states" to="fanuc/joint_states"/>
    <include file="$(find fanuc_r1000ia_support)/launch/robot_interface_streaming_r1000ia80f.launch" >
      <arg name="robot_ip" value="$(arg robot_ip)"/>
      <arg name="use_bswap"  value="$(arg use_bswap)" />
    </include>
  </group>

  <!-- publish the robot state (tf transforms) -->
  <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" />

  <include file="$(find fanuc_r1000ia_sls_2_grinding_moveit_config)/launch/move_group.launch">
    <arg name="publish_monitored_planning_scene" value="true" />
  </include>

  <!-- joint state publisher which combines the mutable and the real joint states for the scene -->
  <node name="combined_joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher" >
    <rosparam param="source_list">[fanuc/joint_states, mutable_joint_states]</rosparam>
    <param name="publish_default_velocities" value="true" />
    <param name="publish_default_efforts" value="true" />
    <param name="publish_default_positions" value="true" />
  </node>

  <!-- publish the joint states associated with transforms that might be calibrated-->
  <node name="mutable_joint_state_publisher" pkg="industrial_extrinsic_cal" type="mutable_joint_state_publisher" output="screen">
    <param name="mutable_joint_state_yaml_file" value="$(find fanuc_r1000ia_sls_2_grinding_resources)/yaml/mutable_joint_states.yaml" />
    <remap from="joint_states" to="/mutable_joint_states"/>
  </node>

  <!-- Including different nodes -->
  <node name="publish_meshfile" pkg="fanuc_grinding_publish_meshfile" type="fanuc_grinding_publish_meshfile" output="screen"/>
  <node name="scanning" pkg="fanuc_grinding_scanning" type="fanuc_grinding_scanning" output="screen"/>
  <node name="execute_joint_state" pkg="fanuc_grinding_execute_joint_state" type="fanuc_grinding_execute_joint_state" output="screen"/>
  <node name="alignment" pkg="fanuc_grinding_alignment" type="fanuc_grinding_alignment" output="screen"/>
  <node name="comparison" pkg="fanuc_grinding_comparison" type="fanuc_grinding_comparison" output="screen"/>
  <node name="path_planning" pkg="fanuc_grinding_path_planning" type="fanuc_grinding_path_planning" output="screen"/>
  <node name="post_processor" pkg="fanuc_grinding_post_processor" type="fanuc_grinding_post_processor" output="screen"/>

  <include file="$(find fanuc_r1000ia_sls_2_grinding_support)/launch/load_r1000ia_grinding.launch" />
  <node name="rviz" pkg="rviz" type="rviz" args="-d $(find fanuc_grinding_rviz_plugin)/config/robot_state_visualize.rviz" output="screen" required="true" />

</launch>
